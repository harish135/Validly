import React from 'react';
import type { ReportData, CustomizationSettings } from '../types';
import { CONFIDENCE_COLORS, CONFIDENCE_TEXT_COLORS } from '../constants';
import IconButton from './IconButton';
import PdfIcon from './icons/PdfIcon';
import CodeIcon from './icons/CodeIcon';
import ShieldCheckIcon from './icons/ShieldCheckIcon';
import DocumentTextIcon from './icons/DocumentTextIcon';
import ListBulletIcon from './icons/ListBulletIcon';
import LightBulbIcon from './icons/LightBulbIcon';
import LinkIcon from './icons/LinkIcon';
import QuestionMarkCircleIcon from './icons/QuestionMarkCircleIcon';
import AcademicCapIcon from './icons/AcademicCapIcon';
import DocumentDuplicateIcon from './icons/DocumentDuplicateIcon';
import CodeBracketSquareIcon from './icons/CodeBracketSquareIcon';
import ChartBarIcon from './icons/ChartBarIcon';
import SimulatedChartDisplay from './SimulatedChartDisplay';
import UsersIcon from './icons/UsersIcon'; // For Consumer Sentiment
import PuzzlePieceIcon from './icons/PuzzlePieceIcon'; // For Formulation Angle
import ScaleIcon from './icons/ScaleIcon'; // For Compliance Tip
import ClockIcon from './icons/ClockIcon'; // For Timestamp
import SparklesIcon from './icons/SparklesIcon';

interface ReportDisplayProps {
  report: ReportData;
  customizationSettings: CustomizationSettings;
  onExportPDF: () => void;
  onGenerateBadge: () => void;
  onExportDocx: () => void; 
  onExportJson: () => void; 
}

interface SectionCardProps {
  title: string;
  icon: React.ReactNode;
  children: React.ReactNode;
  className?: string;
  titleColor?: string; // Use primary color for title text
  accentBorderColor?: string; // Use primary color for border
  animationDelay?: string;
}

const SectionCard: React.FC<SectionCardProps> = ({ title, icon, children, className, titleColor, accentBorderColor, animationDelay }) => (
  <div 
    className={`bg-gradient-to-br from-brand-gray-800 to-brand-gray-850 p-5 rounded-lg shadow-card border border-brand-gray-700 hover:shadow-premium transition-all duration-200 ease-in-out transform hover:-translate-y-px ${accentBorderColor ? 'border-t-2 pt-4' : ''} ${className} animate-premium-slide-in-up`}
    style={{ 
        animationDelay,
        borderTopColor: accentBorderColor ? accentBorderColor : undefined 
    }}
  >
    <div className="flex items-center mb-3">
      {React.cloneElement(icon as React.ReactElement<any>, { className: `w-5 h-5`, style: { color: titleColor || '#2563EB' } })}
      <h3 className={`ml-2 text-lg font-semibold`} style={{ color: titleColor || '#f8fafc' }}>{title}</h3>
    </div>
    {children}
  </div>
);

const InsightSnapshotItem: React.FC<{icon: React.ReactNode, title: string, content?: string, colorClass: string}> = ({icon, title, content, colorClass}) => (
    <div className={`p-3 bg-brand-gray-850 rounded-md border border-brand-gray-700 hover:border-opacity-70 transition-colors group`} style={{borderColor: colorClass}}>
        <div className="flex items-center mb-1.5">
            {React.cloneElement(icon as React.ReactElement<any>, { className: `w-4 h-4 mr-2 ${colorClass}`})}
            <h4 className={`text-sm font-semibold ${colorClass}`}>{title}</h4>
        </div>
        <p className="text-xs text-brand-gray-300 group-hover:text-brand-gray-200 transition-colors">
            {content || "No specific insight generated by AI for this aspect."}
        </p>
    </div>
);


const ReportDisplay: React.FC<ReportDisplayProps> = ({ report, customizationSettings, onExportPDF, onGenerateBadge, onExportDocx, onExportJson }) => {
  console.log('Rendering ReportDisplay with report:', report);
  const confidenceStyle = CONFIDENCE_COLORS[report.confidenceScore] || CONFIDENCE_COLORS.Undetermined;
  const confidenceGeneralTextColor = CONFIDENCE_TEXT_COLORS[report.confidenceScore] || CONFIDENCE_TEXT_COLORS.Undetermined;

  const primaryColor = customizationSettings.primaryColor || confidenceStyle.pillBg || '#2563EB'; 
  const isDarkColor = (hexcolor: string) => {
    if (!hexcolor.startsWith('#')) return true; 
    const r = parseInt(hexcolor.slice(1, 3), 16);
    const g = parseInt(hexcolor.slice(3, 5), 16);
    const b = parseInt(hexcolor.slice(5, 7), 16);
    const luma = 0.2126 * r + 0.7152 * g + 0.0722 * b; 
    return luma < 128;
  };
  const textColorForPrimary = isDarkColor(primaryColor) ? 'text-white' : 'text-brand-gray-950';

  const formatDate = (timestamp: number) => {
    return new Date(timestamp).toLocaleString(undefined, { 
        year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' 
    });
  };

  return (
    <div className="mt-8 p-4 md:p-6 bg-brand-gray-900 rounded-lg shadow-premium space-y-6 border border-brand-gray-700 animate-premium-slide-in-up">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center pb-4 border-b border-brand-gray-700">
        <div>
          <h2 className="text-3xl font-bold text-brand-gray-50">Validation Report</h2>
          <p className="text-md text-brand-gray-300 mt-1">Claim: <span className="font-semibold text-brand-gray-100">"{report.claim}"</span></p>
           {report.generatedTimestamp && (
             <p className="text-xs text-brand-gray-500 mt-2 flex items-center">
                <ClockIcon className="w-3.5 h-3.5 mr-1.5 text-brand-gray-400"/>
                Generated: {formatDate(report.generatedTimestamp)}
            </p>
           )}
        </div>
        <div
            className={`mt-3 sm:mt-0 px-4 py-2 rounded-md text-sm font-medium border shadow-md`}
            style={{
                backgroundColor: primaryColor,
                borderColor: primaryColor 
            }}
        >
          <span className={`font-bold ${textColorForPrimary}`}>Confidence: {report.confidenceScore}</span>
        </div>
      </div>

      <SectionCard title="Insight Snapshot" icon={<SparklesIcon />} titleColor={primaryColor} accentBorderColor={primaryColor} animationDelay="50ms">
          <div className="space-y-3">
              <InsightSnapshotItem 
                icon={<UsersIcon />} 
                title="Simulated Consumer Sentiment" 
                content={report.simulatedConsumerSentimentSnippet}
                colorClass="text-fuchsia-400" // Example color
              />
              <InsightSnapshotItem 
                icon={<PuzzlePieceIcon />} 
                title="Simulated Formulation Angle" 
                content={report.simulatedFormulationAngle}
                colorClass="text-teal-400" // Example color
              />
              <InsightSnapshotItem 
                icon={<ScaleIcon />} 
                title="Simulated Compliance Tip" 
                content={report.simulatedComplianceTip}
                colorClass="text-amber-400" // Example color
              />
          </div>
          <p className="text-xs text-brand-gray-500 italic mt-3">
              Note: These are brief, AI-simulated insights related to your claim for quick cross-referencing.
          </p>
      </SectionCard>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <SectionCard title="Summary" icon={<DocumentTextIcon />} titleColor={primaryColor} accentBorderColor={primaryColor} animationDelay="100ms">
          <p className="text-brand-gray-300 text-sm leading-relaxed">{report.summary}</p>
        </SectionCard>

        <SectionCard title="Confidence Analysis" icon={<ShieldCheckIcon />} titleColor={primaryColor} accentBorderColor={primaryColor} animationDelay="200ms">
            <p className={`text-3xl font-bold ${confidenceGeneralTextColor}`}>{report.confidenceScore}</p>
            <p className="text-brand-gray-300 text-sm mt-1">
                This score reflects the AI's assessment of research plausibility for the claim.
                The report color accents reflect your primary brand color selection.
            </p>
        </SectionCard>

        <SectionCard title="Key Findings" icon={<ListBulletIcon />} titleColor={primaryColor} accentBorderColor={primaryColor} animationDelay="300ms">
          <ul className="space-y-1.5 text-brand-gray-300 text-sm">
            {report.keyFindings.map((finding, index) => (
              <li key={index} className="flex animate-premium-slide-in-left" style={{ animationDelay: `${index * 50}ms` }}>
                <span className={`mr-2 mt-1 flex-shrink-0`} style={{color: primaryColor}}>&#8226;</span>
                <span>{finding}</span>
              </li>
            ))}
          </ul>
        </SectionCard>

        <SectionCard title="Legally-Safe Phrasing" icon={<LightBulbIcon />} titleColor={primaryColor} accentBorderColor={primaryColor} animationDelay="400ms">
          <ul className="space-y-1.5 text-brand-gray-300 text-sm">
            {report.safePhrasing.map((phrase, index) => (
              <li key={index} className="flex animate-premium-slide-in-left" style={{ animationDelay: `${index * 50}ms` }}>
                <span className="text-green-400 mr-2 mt-1 flex-shrink-0">&#10003;</span>
                <span>{phrase}</span>
                </li>
            ))}
          </ul>
        </SectionCard>
      </div>

      {report.simulatedSources && report.simulatedSources.length > 0 && (
         <SectionCard title="Simulated Research Sources" icon={<LinkIcon />} titleColor={primaryColor} animationDelay="500ms">
            <div className="space-y-3">
            {report.simulatedSources.map((source, index) => (
                <div key={index} className="p-3 bg-brand-gray-850 rounded-md border border-brand-gray-700 hover:border-brand-premium-blue transition-colors animate-premium-slide-in-left" style={{ animationDelay: `${index * 75}ms` }}>
                <h4 className="font-semibold text-brand-premium-blue text-sm">
                    <a href={source.url} target="_blank" rel="noopener noreferrer" className="hover:underline break-all">
                    {source.title}
                    </a>
                </h4>
                <p className="text-xs text-brand-gray-400 mt-1 italic">"{source.snippet}"</p>
                <p className="text-xs text-brand-gray-500 mt-1">Source: {new URL(source.url).hostname}</p>
                </div>
            ))}
            <p className="text-xs text-brand-gray-500 italic mt-3">
                Note: These sources are illustrative examples generated by AI. Links point to real domains but use fictional study identifiers.
            </p>
            </div>
        </SectionCard>
      )}

      {report.definedTerms && report.definedTerms.length > 0 && (
        <SectionCard title="Key Terminology" icon={<QuestionMarkCircleIcon />} titleColor={primaryColor} animationDelay="600ms">
          <div className="space-y-3">
            {report.definedTerms.map((termDef, index) => (
              <div key={index} className="text-sm animate-premium-slide-in-left" style={{ animationDelay: `${index * 50}ms` }}>
                <p className="font-semibold text-brand-gray-100">{termDef.term}:</p>
                <p className="text-brand-gray-300 ml-2">{termDef.definition}</p>
              </div>
            ))}
          </div>
        </SectionCard>
      )}

      {report.nuanceAndConsiderations && report.nuanceAndConsiderations.length > 0 && (
        <SectionCard title="Nuance & Considerations" icon={<AcademicCapIcon />} titleColor={primaryColor} animationDelay="700ms">
          <div className="space-y-3">
            {report.nuanceAndConsiderations.map((item, index) => (
              <div key={index} className="text-sm p-2 bg-brand-gray-850 rounded border border-brand-gray-700 animate-premium-slide-in-left" style={{ animationDelay: `${index * 75}ms` }}>
                <p className="font-semibold text-brand-gray-100">{item.aspect}:</p>
                <p className="text-brand-gray-300 ml-2">{item.detail}</p>
              </div>
            ))}
          </div>
        </SectionCard>
      )}

      {report.simulatedChartData && report.simulatedChartData.labels && report.simulatedChartData.labels.length > 0 && report.simulatedChartData.values && report.simulatedChartData.values.length > 0 && (
        <SectionCard 
          title={report.simulatedChartData.chartTitle || "Simulated Data Insights"} 
          icon={<ChartBarIcon />} 
          titleColor={primaryColor}
          animationDelay="800ms"
        >
          <SimulatedChartDisplay chartData={report.simulatedChartData} primaryColor={primaryColor} />
        </SectionCard>
      )}

      <div className="mt-8 pt-6 border-t border-brand-gray-700 flex flex-col sm:flex-row sm:justify-end space-y-3 sm:space-y-0 sm:space-x-3">
        <IconButton
            icon={<PdfIcon />}
            label="Export PDF"
            onClick={onExportPDF}
            variant="secondary"
            size="md"
        />
        <IconButton
            icon={<CodeIcon />}
            label="Get Trust Badge"
            onClick={onGenerateBadge}
            variant="secondary"
            size="md"
        />
        <IconButton
            icon={<DocumentDuplicateIcon />}
            label="Export as DOCX"
            onClick={onExportDocx} 
            variant="secondary"
            size="md"
        />
        <IconButton
            icon={<CodeBracketSquareIcon />}
            label="Export Data (JSON)"
            onClick={onExportJson} 
            variant="secondary"
            size="md"
        />
      </div>
    </div>
  );
};

export default ReportDisplay;